package Garbage

import android.annotation.SuppressLint
import android.content.Intent
import android.graphics.Color
import android.graphics.drawable.ColorDrawable
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import androidx.annotation.RequiresApi

import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.children
import businessLogic.DataBL
import com.example.yogatime.InstructorDiaryWeekly
import com.example.yogatime.R
import com.google.android.material.button.MaterialButton
import com.kizitonwose.calendar.core.*

import com.kizitonwose.calendar.view.*
import java.time.LocalDate

import java.time.YearMonth
import java.time.format.TextStyle
import java.util.*


class InstructorDiary: AppCompatActivity() {

    @RequiresApi(Build.VERSION_CODES.O)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.instructor_activity)
        val databl = DataBL()
        val userId: String = intent.getSerializableExtra("userId",) as String
        class DayViewContainer(view: View) : ViewContainer(view) {
            val textView = view.findViewById<TextView>(R.id.calendarDayText)
            // With ViewBinding
            // val textView = CalendarDayLayoutBinding.bind(view).calendarDayText
        }
        val Pink = Color.rgb(255,238,238)
        findViewById<Button>(R.id.weeklyView).setOnClickListener {
            val intent = Intent(this, InstructorDiaryWeekly::class.java)
            // start your next activity
            Log.d("Transfer userid",userId)
            intent.putExtra("userId",userId)
            startActivity(intent)
        }

//        val weekCalendarView: WeekCalendarView = findViewById(R.id.weekCalendarView)
//
//        weekCalendarView.dayBinder = object : WeekDayBinder<DayViewContainer> {
//            // Called only when a new container is needed.
//            override fun create(view: View) = DayViewContainer(view)
//
//            // Called every time we need to reuse a container.
//            override fun bind(container: DayViewContainer, data: WeekDay) {
//                container.textView.text = "${data.date.dayOfWeek}" + '\n' +"${data.date}"
//                container.textView.textSize = width/100
//                container.view.setBackgroundColor(Color.rgb(255,102,102))
//                container.view.setOnClickListener(object : DoubleClickListener() {
//                    override fun onDoubleClick(v: View) {
//                        v.setBackgroundColor(Color.rgb(207, 159, 255))
//                    }
//                })
//            }
//        }
//        val currentDate = LocalDate.now()
//        val currentMonth = YearMonth.now()
//        val startDate = currentMonth.minusMonths(100).atStartOfMonth() // Adjust as needed
//        val endDate = currentMonth.plusMonths(100).atEndOfMonth()  // Adjust as needed
//        val firstDayOfWeek = firstDayOfWeekFromLocale() // Available from the library
//        weekCalendarView.setup(startDate, endDate, firstDayOfWeek)
//        weekCalendarView.scrollToWeek(currentDate)

        var markedDate: Int? = null
        var markedContainerView: View? = null
        var added:Boolean = false
        val calendarView:CalendarView = findViewById(R.id.calendarView)
        calendarView.dayBinder = object : MonthDayBinder<DayViewContainer> {
            // Called only when a new container is needed.
            override fun create(view: View) = DayViewContainer(view)
            // Called every time we need to reuse a container.
            override fun bind(container: DayViewContainer, data: CalendarDay) {
                container.textView.text = data.date.dayOfMonth.toString()
                if (data.date >= LocalDate.now()) {
                    container.textView.setTextColor(Color.BLACK)
                    container.view.setOnClickListener(object : DoubleClickListener() {
                        override fun onDoubleClick(v: View) {
                            v.setBackgroundColor(Color.rgb(207, 159, 255))
                            markedDate?.let { removeTextView(it) }
                            markedContainerView?.let { view -> view.setBackgroundColor(Pink)  }
                            markedDate = data.date.dayOfMonth
                            markedContainerView = container.view
                            addTextView("Date ${data.date}", markedDate!!)
                            if (added){
                                removeHourView()
                                removeSaveButton()
                            }
                            fun addHourView(date: String) {
                                var dates = date.split(",").toString()
                                Log.d("Date", dates)
                                for (i in 8..19) {
                                    val text: TextView
                                    if(i<9) {
                                        text = addTextView("From 0${i}:00 -> 0${i+1}:00", i * 100)
                                    }
                                    else if(i==9){
                                        text = addTextView("From 0${i}:00 -> ${i+1}:00", i * 100)
                                    }
                                    else{
                                        text = addTextView("From ${i}:00 -> ${i+1}:00", i * 100)
                                    }
                                    text.setOnClickListener(
                                        addDates
                                    )
                                    if(i.toString() in dates){
                                        text.setBackgroundColor(Color.GREEN)
                                    }
                                }
                                addSaveButton().setOnClickListener {
                                    addInstructorActivity(databl,userId,data.date.toString())
                                }
                            }
                            databl.getInstructorTimeInDataBase(userId,data.date.toString(),::addHourView)
                            added = true
                        }
                    })
                } else {
                    container.textView.setTextColor(Color.GRAY)
                }
                container.view.setBackgroundColor(Pink)



            }


        }




        var currentMonth = YearMonth.now()

        changeText("${currentMonth.month} ${currentMonth.year}")
        val startMonth = currentMonth.minusMonths(100)  // Adjust as needed
        val endMonth = currentMonth.plusMonths(100)  // Adjust as needed
//        val firstDayOfWeek = firstDayOfWeekFromLocale() // Available from the library
        val daysOfWeek = daysOfWeek()
        calendarView.setup(startMonth, endMonth, daysOfWeek.first())
//        calendarView.setup(startMonth, endMonth, firstDayOfWeek)
        calendarView.scrollToMonth(currentMonth)
        val titlesContainer = findViewById<ViewGroup>(R.id.titlesContainer)
        titlesContainer.children
            .map { it as TextView }
            .forEachIndexed { index, textView ->
                val dayOfWeek = daysOfWeek[index]
                val title = dayOfWeek.getDisplayName(TextStyle.SHORT, Locale.getDefault())
                textView.text = title
            }


        var nextMonth: Button = findViewById(R.id.nextMonth)
        nextMonth.setOnClickListener {
            currentMonth = currentMonth.nextMonth
            calendarView.scrollToMonth(currentMonth)
            changeText("${currentMonth.month} ${currentMonth.year}")
        }

        var prevMonth: Button = findViewById(R.id.prevMonth)
        prevMonth.setOnClickListener {
            val prevMonth = currentMonth.previousMonth

            if (prevMonth < YearMonth.now()){
                Toast.makeText(this,"Can't go to the past",Toast.LENGTH_SHORT).show()
            }
            else {
                currentMonth = prevMonth
                calendarView.scrollToMonth(currentMonth)
                changeText("${currentMonth.month} ${currentMonth.year}")
            }
        }




    }


    abstract class DoubleClickListener : View.OnClickListener {
        private var lastClickTime: Long = 0
        override fun onClick(v: View) {
            val clickTime = System.currentTimeMillis()
            if (clickTime - lastClickTime < DOUBLE_CLICK_TIME_DELTA) {
                onDoubleClick(v)
                lastClickTime = 0
            }
            lastClickTime = clickTime
        }
        abstract fun onDoubleClick(v: View)
        companion object {
            private const val DOUBLE_CLICK_TIME_DELTA: Long = 300 //milliseconds
        }
    }

    object addDates : DoubleClickListener() {
        override fun onDoubleClick(v: View) {
            val background = v.background
            if (background!=null) {
                val backgroundColor = background as ColorDrawable
                if (backgroundColor.color == Color.GREEN) {
                    v.setBackgroundColor(Color.WHITE)
                } else {
                    v.setBackgroundColor(Color.GREEN)
                }
            }
            else{
                v.setBackgroundColor(Color.GREEN)
            }
        }
    }

    private fun changeText(text: String) {
        val textView: TextView = findViewById(R.id.date)
        textView.text = text
    }
    fun addTextView(text: String,id: Int): TextView {
        val textView: TextView = TextView(this)
        textView.text = text
        textView.id = id
        val viewLayout: LinearLayout = findViewById(R.id.timeLayout)

        viewLayout.addView(textView)
        return textView
    }


    fun removeTextView(id: Int) {
        val textView: TextView = findViewById(id)
        val viewLayout: LinearLayout = findViewById(R.id.timeLayout)

        viewLayout.removeView(textView)
    }


    fun removeHourView(){
        for (i in 8..19) {
            removeTextView(i*100)
        }
    }

    @SuppressLint("ResourceType")
    fun addSaveButton(): Button {
        val buttonId = 9080
        val saveButton = MaterialButton(this)
        saveButton.id = buttonId
        saveButton.text = "Save Date activity"
        saveButton.setTextColor(Color.rgb(159, 43, 104))
        saveButton.setBackgroundColor(Color.WHITE)
        saveButton.cornerRadius = 100
        saveButton.strokeWidth = 2
        val viewLayout: LinearLayout = findViewById(R.id.timeLayout)

        viewLayout.addView(saveButton)
        return saveButton
    }

    fun removeSaveButton() {
        val id = 9080
        val textView: MaterialButton = findViewById(id)
        val viewLayout: LinearLayout = findViewById(R.id.timeLayout)

        viewLayout.removeView(textView)

    }

    fun addInstructorActivity(databl:DataBL,userId:String,date:String){
        var hourString:String = ""
        for (i in 8..19) {
            val hours:TextView = findViewById(i*100)
            val background = hours.background
            if (background!=null) {
                val backgroundColor = background as ColorDrawable
                if (backgroundColor.color == Color.GREEN) {
                    hourString+="${i},"
                }
            }
        }
        if (hourString == ""){
            Toast.makeText(this,"Please mark a date",Toast.LENGTH_SHORT).show()
        }
        else {
            hourString = hourString.substring(0,hourString.length-1)
            Log.d("Substring",hourString)
            databl.setInstructorTimeInDataBase(userId, date, hourString)
        }
    }





}